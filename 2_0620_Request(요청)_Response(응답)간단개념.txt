HTTP Request와 Response: 웹과 서블릿의 기본 개념

## 1. HTTP 요청(Request)과 응답(Response) 기본 개념

### HTTP 요청(Request
HTTP 요청은 클라이언트(브라우저)가 서버에 정보를 요청하는 메시지입니다.
--> HTTP : 편지봉투처럼 주고받고 하기위한 규약.

**주요 구성 요소:**
1. **요청 라인(Request Line)**: 요청 메서드, 리소스 경로(URL), HTTP 버전
2. **헤더(Headers)**: 요청과 관련된 추가 정보 (key-value 쌍)
3. **빈 줄**: 헤더와 본문 사이의 구분자
4. **본문(Body)**: 서버로 전송할 데이터 (선택 사항)

**예시:**
```
GET /index.html HTTP/1.1 <-- 누구든지 볼수있음. 요청하는 것 주소창에 포함해서// 패스워드 주민번호 등등 > POST로 보냄.
Host: www.example.com  <-- 비유) 편지봉투 ... 서버에 접근
User-Agent: Mozilla/5.0
Accept-Language: ko-KR
```

### HTTP 응답(Response)
HTTP 응답은 서버가 클라이언트의 요청에 대한 결과를 전송하는 메시지입니다.

**주요 구성 요소:**
1. **상태 라인(Status Line)**: HTTP 버전, 상태 코드, 상태 메시지
2. **헤더(Headers)**: 응답과 관련된 추가 정보  <--요청을 하는 출발지 주소 등
3. **빈 줄**: 헤더와 본문 사이의 구분자
4. **본문(Body)**: 클라이언트에게 전송할 데이터 <-- 내용

**예시:**
```
HTTP/1.1 200 OK
Date: Thu, 19 Jun 2025 06:09:08 GMT
Content-Type: text/html; charset=UTF-8
Content-Length: 138

<!DOCTYPE html>
<html>
<head><title>예제 페이지</title></head>
<body><h1>안녕하세요!</h1></body>
</html>
```

## 2. HTTP 요청 메서드

### 주요 HTTP 메서드

| 메서드 | 설명 | 특징 |
|--------|------|------|
| **GET** | 리소스 조회 | - URL에 데이터 노출<br>- 캐싱 가능<br>- 북마크 가능<br>- 데이터 크기 제한 |
| **POST** | 리소스 생성/수정 | - 본문에 데이터 포함<br>- 캐싱 불가<br>- 북마크 불가<br>- 데이터 크기 제한 없음 | BODY에 넣어서 보냄.(URL에 안보임)
| **PUT** | 리소스 전체 교체/생성 | - 멱등성 보장(같은 요청 여러번 해도 결과 동일) |
| **PATCH** | 리소스 부분 수정 | - 변경할 부분만 전송 |
| **DELETE** | 리소스 삭제 | - 멱등성 보장 | ------
| **HEAD** | 헤더만 조회 | - GET과 동일하나 본문 없음 |
| **OPTIONS** | 지원 메서드 확인 | - CORS에 주로 사용 |

## 3. 서블릿(Servlet) 구조와 동작 방식

### 서블릿이란?
**서블릿(Servlet)**은 Java 언어를 기반으로 웹 애플리케이션을 개발할 수 있는 API 및 명세입니다.
            클라이언트의 요청을 처리하고 응답을 생성하는 Java 클래스입니다.

### 서블릿 생명주기
1. **초기화(init)**: 서블릿 인스턴스 생성 시 한 번 실행
2. **서비스(service)**: 클라이언트 요청마다 실행, doGet(), doPost() 등을 호출
3. **소멸(destroy)**: 서블릿 종료 시 한 번 실행, 리소스 해제



## 비연결성(ConnectionLess)
>> 웹의 특징... 여러명이 브라우저를 이용해서 서버를 호출하는 구조
    서버에서는 최대한 많은 사용자에게 서비스를 제공하기 위해서 노력함.

HTTP(통신규약)
>> 위의 비연결성 이라는 방식을 이용함
    하나의 요청과 응답을 처리 -> 바로 연결을 종료한다는 의미.
    (예시) 한 유저가 리스트를 요청... 응답이 끝나면 끝[ .close() 반납)
    2번째 유저가 리스트 요청/// 응답받고 끝내질않음. 계속 물고있음(자원을 계속 이용중) <-- 여기에 비연결성을 도입함
    ㄴ 이거를 (보안)가용성을 침해한다고 함. 정상적인 이용자들이 이용을 못하게 막는것.

## 서버 사이드 렌더링(SSR) 예전방식임.<----> CSR 요즘방식
>> SSR : 서버가 데이터와 화면을 제공함 (1인2역) > 서버가 바쁨, 자원도 많이씀 => 효율 떨어짐.(규모가 클때)

>> CSR(클라이언트 사이드 렌더링)
    프론트 엔드서버 (리액트) : 화면만 제공
    백엔드 서버 (자바, 스프링, 부트, Node.js, 장고, jsp, php) : DB로부터 데이터를 전달받아 화면에 재전달.

## 서블릿
    : SSR 프로그래밍임. (서버 언어)

1) 동시에 여러 요청처리를 어떻게할까?
2) 서버에 문제가 생기면 처리를 어떻게할까?
3) 데이터 어떻게 효율적으로 전달할까?
4) 분산환경 처리는 어떻게할까?
--> 이 고민거리가 매번 반복됨.. => 시니어 개발자들이 미리 다 작업환경을 구성했음.
    --> JAVA EE 기술 스펙으로 정리했다. why? 여기안에 다양한 라이브러리가 있어서
    => 여러 도구들 즉, 프레임워크가 있다.

서블릿 (ex. 자바 클래스), JSP (ex. HTML 화면) 을 이용해서 1차 기본 웹프로그램 다루기.
->  서블릿 : 간단히 서버에서 동적으로 요청<->응답을 처리할 수 있는 API(접점)를 정의한것