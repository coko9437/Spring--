250623

(1) 서블릿 : 클라이언트의 요청을 처리하고 응답을 생성하는 자바 클래스
	클라이언트 <---> 서블릿 <---> 서버
		         (중간다리역할)
- 사용자가 브라우저에서 /todo/list 주소로 접근 → GET 요청 발생

- 이 요청이 서블릿 (TodoListController) 으로 전달됨

- 서블릿은 필요한 작업을 처리하거나 JSP 등 뷰로 요청을 전달

- JSP가 HTML 형태로 응답을 만들어 클라이언트에 돌려줌
즉 ==> 
서블릿 (Servlet): 컨트롤러 역할
👉 요청을 받고, 데이터를 처리하고, 적절한 JSP로 연결

JSP: 뷰(View) 역할
👉 사용자에게 보여줄 화면을 HTML 형식으로 생성

### 서블릿 생명주기
1. **초기화(init)**: 서블릿 인스턴스 생성 시 한 번 실행
2. **서비스(service)**: 클라이언트 요청마다 실행, doGet(), doPost() 등을 호출
3. **소멸(destroy)**: 서블릿 종료 시 한 번 실행, 리소스 해제

# JSP 화면 접근시 주의사항
    JSP 호출할 때, GET/POST 호출을 구분하지않음.
1) input.jsp는 GET 방식으로 호출함 -웹브라우저(주소창)에서
        ex) http://localhost:8080/calc/input.jsp?num1=&num2=

    참고,
    jsp : 기존 html 화면에 + 자바 코드를 주입해서 사용하는 페이지(화면처리)
    서블릿 : 기존 자바 코드에 + html 화면도 주입이 가능(불편) + 로직 처리 가능함.(로직처리)

## JSP(JavaServer Pages)
- **개념** : HTML 내에 자바 코드를 삽입하여 동적 웹 페이지를 생성하는 기술
- **단점** :
  - 비즈니스 로직과 프레젠테이션 로직이 혼재될 수 있음
  - JSP 스크립트릿의 과도한 사용으로 유지보수 어려움

Model : JAVA,데이터베이스
view : 웹 화면 HTML
Controller : 서블릿(자바 파일)

## 웹 MVC(Model-View-Controller) 패턴
- **개념**: 애플리케이션을 Model, View, Controller 세 가지 역할로 분리하는 디자인 패턴
- **구성 요소**:
  - **Model**: 데이터와 비즈니스 로직 처리 (JAVA,데이터베이스
  - **View**: 사용자 인터페이스, 데이터 표현 (웹 화면 HTML
  - **Controller**: 사용자 입력 처리, Model과 View 연결 (서블릿(자바 파일)
- **특징**:
  - 관심사의 분리(Separation of Concerns)
  - 코드 재사용성 증가
  - 유지보수 용이성 향상
- **구현**:
  - 서블릿이 Controller 역할
  - JSP가 View 역할
  - JavaBeans, DTO, DAO 등이 Model 역할

## 서블릿과 JSP 비교표

| 특성 | 서블릿(Servlet) | JSP(JavaServer Pages) |
|------|----------------|------------------------|
| 언어 형태 | 자바 코드 내에 HTML | HTML 내에 자바 코드 |
| 주요 용도 | 비즈니스 로직 처리 | 화면 표현(View) |
| 실행 과정 | 직접 컴파일 후 실행 | JSP → 서블릿 변환 → 컴파일 → 실행 |
| 변경 반영 | 재컴파일 필요 | 자동 반영 (일반적으로) |
| 작성 용이성 | HTML 작성 어려움 | HTML 작성 쉬움 |
| 디버깅 | 상대적으로 쉬움 | 상대적으로 어려움 |
| 성능 | 최초 로딩 빠름 | 최초 변환 시간 필요 |

## MVC 패턴 흐름도

```

[클라이언트]  →   HTTP 요청  →  [웹서버]
                             	         │
                          	    요청 전달
                             	         │
                             	         ▼
                     		[Controller (서블릿)]
                             	         │
                      	            요청 처리 및 분석
                             	         │
                            	         ▼
         ┌─────────────┴─────────--────┐
         │                                   				  │
         ▼                                   				  ▼
  [Model (JavaBeans,             			데이터 전달    [View (JSP)]
    DTO, DAO, Service)]     ──────────▶     		  │
          │                                        			  │
 데이터 처리 및 반환                        		       HTML 생성
          │                                        			  │
          └─────────────-┬─-───────-────┘
                             		 │
                             		 ▼
                      		      HTTP 응답 반환
                             		 │
                             		 ▼
                       		       [클라이언트]




```

## 서블릿 기반 MVC 패턴의 처리 흐름
1. 클라이언트가 요청을 보냄
2. 서블릿 컨테이너가 요청을 받아 적절한 서블릿(Controller)에 전달
3. Controller는 요청을 분석하고 필요한 Model을 호출
4. Model은 비즈니스 로직을 처리하고 결과를 Controller에 반환
5. Controller는 처리 결과를 바탕으로 적절한 View를 선택
6. View(JSP)는 Model 데이터를 사용하여 화면을 생성
7. 생성된 화면이 클라이언트에게 응답으로 전달됨


- getRequestDispatcher
 : (String path): 지정된 경로의 리소스에 대한
    RequestDispatcher 반환

- forward() 메서드 ...예시) forward(req, reps)
 : 요청과 응답 객체가 그대로 전달됨
요청 처리를 완전히 위임함

- WEB-INF 디렉토리
 : 외부에서 직접 접근 불가능한 디렉토리